{"ast":null,"code":"var _jsxFileName = \"/home/forestpe/IT/Projects/React/marvel_functional/src/components/charList/CharList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CharList = props => {\n  _s();\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n  const {\n    loading,\n    error,\n    getAllCharacters\n  } = useMarvelService();\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n  const onCharListLoaded = newCharList => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n    setCharList(charList => [...charList, ...newCharList]);\n    setNewItemLoading(newItemLoading => false);\n    setOffset(offset => offset + 9);\n    setCharEnded(charEnded => ended);\n  };\n  const itemRefs = useRef([]);\n  const focusOnItem = id => {\n    itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n  };\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = {\n        'objectFit': 'cover'\n      };\n      if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {\n          'objectFit': 'unset'\n        };\n      }\n      return /*#__PURE__*/_jsxDEV(CSSTransition, {\n        timeout: 500,\n        classNames: \"loadingCharList\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"char__item\",\n          tabIndex: 0,\n          ref: el => itemRefs.current[i] = el,\n          onClick: () => {\n            props.onCharSelected(item.id);\n            focusOnItem(i);\n          },\n          onKeyPress: e => {\n            if (e.key === ' ' || e.key === \"Enter\") {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.thumbnail,\n            alt: item.name,\n            style: imgStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"char__name\",\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"char__grid\",\n      children: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this);\n  }\n  const items = renderItems(charList);\n  const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 34\n  }, this) : null;\n  const spinner = loading && !newItemLoading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 50\n  }, this) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"char__list\",\n    children: [errorMessage, spinner, items, /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button__main button__long\",\n      disabled: newItemLoading,\n      style: {\n        'display': charEnded ? 'none' : 'block'\n      },\n      onClick: () => onRequest(offset),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: \"load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 17\n  }, this);\n};\n_s(CharList, \"HpVx0KVk6dCvMevWoOlsw1EGqYE=\", false, function () {\n  return [useMarvelService];\n});\n_c = CharList;\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired\n};\nexport default CharList;\nvar _c;\n$RefreshReg$(_c, \"CharList\");","map":{"version":3,"names":["useState","useEffect","useRef","CSSTransition","PropTypes","Spinner","ErrorMessage","useMarvelService","jsxDEV","_jsxDEV","CharList","props","_s","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","loading","error","getAllCharacters","onRequest","initial","then","onCharListLoaded","newCharList","ended","length","itemRefs","focusOnItem","id","current","forEach","item","classList","remove","add","focus","renderItems","arr","items","map","i","imgStyle","thumbnail","timeout","classNames","children","className","tabIndex","ref","el","onClick","onCharSelected","onKeyPress","e","key","src","alt","name","style","fileName","_jsxFileName","lineNumber","columnNumber","errorMessage","spinner","disabled","_c","propTypes","func","isRequired","$RefreshReg$"],"sources":["/home/forestpe/IT/Projects/React/marvel_functional/src/components/charList/CharList.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n\n    \n    const {loading, error, getAllCharacters}= useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    },[])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition \n                timeout={500}\n                classNames='loadingCharList'>\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        key={item.id}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                    </CSSTransition>\n            )\n        });\n\n        return (\n\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n\n                <div className=\"char__list\">\n                    {errorMessage}\n                    {spinner}\n                    {items}\n                    <button \n                        className=\"button button__main button__long\"\n                        disabled={newItemLoading}\n                        style={{'display': charEnded ? 'none' : 'block'}}\n                        onClick={() => onRequest(offset)}>\n                        <div className=\"inner\">load more</div>\n                    </button>\n                </div>\n\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;"],"mappings":"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"},"metadata":{},"sourceType":"module"}