[{"/home/forestpe/IT/Projects/React/marvel_functional/src/index.js":"1","/home/forestpe/IT/Projects/React/marvel_functional/src/components/app/App.js":"2","/home/forestpe/IT/Projects/React/marvel_functional/src/components/pages/ComicsPage.js":"3","/home/forestpe/IT/Projects/React/marvel_functional/src/components/pages/404.js":"4","/home/forestpe/IT/Projects/React/marvel_functional/src/components/pages/MainPage.js":"5","/home/forestpe/IT/Projects/React/marvel_functional/src/components/appHeader/AppHeader.js":"6","/home/forestpe/IT/Projects/React/marvel_functional/src/components/spinner/Spinner.js":"7","/home/forestpe/IT/Projects/React/marvel_functional/src/components/errorMessage/ErrorMessage.js":"8","/home/forestpe/IT/Projects/React/marvel_functional/src/components/comicsList/ComicsList.js":"9","/home/forestpe/IT/Projects/React/marvel_functional/src/components/errorBoundary/ErrorBoundary.js":"10","/home/forestpe/IT/Projects/React/marvel_functional/src/components/charList/CharList.js":"11","/home/forestpe/IT/Projects/React/marvel_functional/src/components/randomChar/RandomChar.js":"12","/home/forestpe/IT/Projects/React/marvel_functional/src/components/appBanner/AppBanner.js":"13","/home/forestpe/IT/Projects/React/marvel_functional/src/services/MarvelService.js":"14","/home/forestpe/IT/Projects/React/marvel_functional/src/components/charInfo/CharInfo.js":"15","/home/forestpe/IT/Projects/React/marvel_functional/src/components/skeleton/Skeleton.js":"16","/home/forestpe/IT/Projects/React/marvel_functional/src/hooks/http.hook.js":"17","/home/forestpe/IT/Projects/React/marvel_functional/src/components/charSearchForm/CharSearchForm.js":"18","/home/forestpe/IT/Projects/React/marvel_functional/src/components/pages/SinglePage.js":"19","/home/forestpe/IT/Projects/React/marvel_functional/src/components/pages/singleComicLayout/SingleComicLayout.js":"20","/home/forestpe/IT/Projects/React/marvel_functional/src/components/pages/singleCharacterLayout/SingleCharacterLayout.js":"21"},{"size":237,"mtime":1670686298402,"results":"22","hashOfConfig":"23"},{"size":1525,"mtime":1680026757135,"results":"24","hashOfConfig":"23"},{"size":514,"mtime":1680091984381,"results":"25","hashOfConfig":"23"},{"size":522,"mtime":1670698358798,"results":"26","hashOfConfig":"23"},{"size":1505,"mtime":1680091860968,"results":"27","hashOfConfig":"23"},{"size":935,"mtime":1670701678858,"results":"28","hashOfConfig":"23"},{"size":4551,"mtime":1666026431143,"results":"29","hashOfConfig":"23"},{"size":249,"mtime":1666030918046,"results":"30","hashOfConfig":"23"},{"size":2503,"mtime":1671905896969,"results":"31","hashOfConfig":"23"},{"size":489,"mtime":1666380827646,"results":"32","hashOfConfig":"23"},{"size":3779,"mtime":1680022510475,"results":"33","hashOfConfig":"23"},{"size":3080,"mtime":1670383351364,"results":"34","hashOfConfig":"23"},{"size":522,"mtime":1629627299000,"results":"35","hashOfConfig":"23"},{"size":2528,"mtime":1680022504751,"results":"36","hashOfConfig":"23"},{"size":3168,"mtime":1671905983092,"results":"37","hashOfConfig":"23"},{"size":666,"mtime":1629627051000,"results":"38","hashOfConfig":"23"},{"size":915,"mtime":1670376727509,"results":"39","hashOfConfig":"23"},{"size":2822,"mtime":1680020129637,"results":"40","hashOfConfig":"23"},{"size":1747,"mtime":1680026551230,"results":"41","hashOfConfig":"23"},{"size":1130,"mtime":1680092226006,"results":"42","hashOfConfig":"23"},{"size":784,"mtime":1680100603286,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"5jzuif",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/forestpe/IT/Projects/React/marvel_functional/src/index.js",[],["92","93"],"/home/forestpe/IT/Projects/React/marvel_functional/src/components/app/App.js",[],"/home/forestpe/IT/Projects/React/marvel_functional/src/components/pages/ComicsPage.js",[],"/home/forestpe/IT/Projects/React/marvel_functional/src/components/pages/404.js",[],"/home/forestpe/IT/Projects/React/marvel_functional/src/components/pages/MainPage.js",[],"/home/forestpe/IT/Projects/React/marvel_functional/src/components/appHeader/AppHeader.js",[],"/home/forestpe/IT/Projects/React/marvel_functional/src/components/spinner/Spinner.js",[],"/home/forestpe/IT/Projects/React/marvel_functional/src/components/errorMessage/ErrorMessage.js",[],"/home/forestpe/IT/Projects/React/marvel_functional/src/components/comicsList/ComicsList.js",["94"],"import useMarvelService from '../../services/MarvelService';\nimport { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n    \n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n    \n    const {loading, error, getAllComics}= useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    },[])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true\n        }\n\n        setComicsList([...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {            \n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","/home/forestpe/IT/Projects/React/marvel_functional/src/components/errorBoundary/ErrorBoundary.js",[],"/home/forestpe/IT/Projects/React/marvel_functional/src/components/charList/CharList.js",["95"],"import { useState, useEffect, useRef } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters}= useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    },[])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames='char__item'>\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>   \n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","/home/forestpe/IT/Projects/React/marvel_functional/src/components/randomChar/RandomChar.js",["96"],"import { useState, useEffect } from 'react';\nimport Spinner from '../../components/spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?!\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button className=\"button button__main\" onClick={updateChar}>\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\" rel=\"noreferrer noopener\" target=\"_blank\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\" rel=\"noreferrer noopener\" target=\"_blank\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;\n","/home/forestpe/IT/Projects/React/marvel_functional/src/components/appBanner/AppBanner.js",[],"/home/forestpe/IT/Projects/React/marvel_functional/src/services/MarvelService.js",[],"/home/forestpe/IT/Projects/React/marvel_functional/src/components/charInfo/CharInfo.js",["97","98"],"import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\n\n\nconst View = ({char}) => {\n\n    \n    const {name, description, thumbnail, homepage, wiki, comics, id} = char;\n        let imgStyle = {'objectFit' : 'cover'};\n        if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n            imgStyle = {'objectFit' : 'unset'};\n        }\n\n    const comicsValue = comics ? \"Comics:\" : \"Comics: no comics\"\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\" rel=\"noreferrer noopener\" target=\"_blank\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\" rel=\"noreferrer noopener\" target=\"_blank\">\n                            <div className=\"inner\">Wiki</div>   \n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">{comicsValue}</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        return (\n                            <li key={i} className=\"char__comics-item\"><Link to={`/comics/${item.resourceURI.slice(43)}`}>{item.name}</Link>\n                                \n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","/home/forestpe/IT/Projects/React/marvel_functional/src/components/skeleton/Skeleton.js",[],"/home/forestpe/IT/Projects/React/marvel_functional/src/hooks/http.hook.js",[],"/home/forestpe/IT/Projects/React/marvel_functional/src/components/charSearchForm/CharSearchForm.js",[],"/home/forestpe/IT/Projects/React/marvel_functional/src/components/pages/SinglePage.js",["99","100"],"import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport AppBanner from \"../appBanner/AppBanner\";\n\n// Хотелось бы вынести функцию по загрузке данных как отдельный аргумент\n// Но тогда мы потеряем связь со стэйтами загрузки и ошибки\n// А если вынесем их все в App.js - то они будут одни на все страницы\n\nconst SinglePage = ({Component, dataType}) => {\n        const {id} = useParams();\n        const [data, setData] = useState(null);\n        const {loading, error, getComic, getCharacter, clearError} = useMarvelService();\n\n        useEffect(() => {\n            updateData()\n        }, [id])\n\n        const updateData = () => {\n            clearError();\n\n            switch (dataType) {\n                case 'comic':\n                    getComic(id).then(onDataLoaded);\n                    break;\n                case 'character':\n                    getCharacter(id).then(onDataLoaded);\n            }\n        }\n\n        const onDataLoaded = (data) => {\n            setData(data);\n        }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !data) ? <Component data={data}/> : null;\n\n        return (\n            <>\n                <AppBanner/>\n                {errorMessage}\n                {spinner}\n                {content}\n            </>\n        )\n}\n\nexport default SinglePage;","/home/forestpe/IT/Projects/React/marvel_functional/src/components/pages/singleComicLayout/SingleComicLayout.js",[],"/home/forestpe/IT/Projects/React/marvel_functional/src/components/pages/singleCharacterLayout/SingleCharacterLayout.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":21,"column":7,"nodeType":"107","endLine":21,"endColumn":9,"suggestions":"108"},{"ruleId":"105","severity":1,"message":"106","line":21,"column":7,"nodeType":"107","endLine":21,"endColumn":9,"suggestions":"109"},{"ruleId":"105","severity":1,"message":"110","line":22,"column":8,"nodeType":"107","endLine":22,"endColumn":10,"suggestions":"111"},{"ruleId":"105","severity":1,"message":"110","line":21,"column":8,"nodeType":"107","endLine":21,"endColumn":22,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":59,"column":66,"nodeType":"115","messageId":"116","endLine":59,"endColumn":68},{"ruleId":"105","severity":1,"message":"117","line":20,"column":12,"nodeType":"107","endLine":20,"endColumn":16,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":25,"column":13,"nodeType":"121","messageId":"122","endLine":31,"endColumn":14},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'offset' and 'onRequest'. Either include them or remove the dependency array.","ArrayExpression",["125"],["126"],"React Hook useEffect has a missing dependency: 'updateChar'. Either include it or remove the dependency array.",["127"],["128"],"no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'updateData'. Either include it or remove the dependency array.",["129"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},{"desc":"130","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [offset, onRequest]",{"range":"139","text":"140"},{"range":"141","text":"140"},"Update the dependencies array to be: [updateChar]",{"range":"142","text":"143"},"Update the dependencies array to be: [props.charId, updateChar]",{"range":"144","text":"145"},"Update the dependencies array to be: [id, updateData]",{"range":"146","text":"147"},[661,663],"[offset, onRequest]",[727,729],[627,629],"[updateChar]",[560,574],"[props.charId, updateChar]",[787,791],"[id, updateData]"]